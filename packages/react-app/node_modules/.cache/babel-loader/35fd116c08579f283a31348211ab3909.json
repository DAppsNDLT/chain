{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\nimport { ETHERSCAN_KEY } from \"../constants\";\nexport default function useGasPrice(targetNetwork, speed, pollTime = 39999) {\n  _s();\n\n  const [gasPrice, setGasPrice] = useState();\n\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      axios.get(\"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=\" + ETHERSCAN_KEY).then(response => {\n        console.log(\"response gas: \", response);\n        const newGasPrice = response.data.result[speed || \"FastGasPrice\"] * 1000000000;\n\n        if (newGasPrice !== gasPrice) {\n          setGasPrice(newGasPrice);\n        }\n      }).catch(error => console.log(error));\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n\n_s(useGasPrice, \"M6rNpjDI08aK1Rx81VHwd6fKK6k=\", false, function () {\n  return [usePoller];\n});","map":{"version":3,"sources":["/Users/derrick/DewdLabs/scaffold-eth/packages/react-app/src/hooks/GasPrice.js"],"names":["axios","usePoller","useState","ETHERSCAN_KEY","useGasPrice","targetNetwork","speed","pollTime","gasPrice","setGasPrice","loadGasPrice","hasOwnProperty","get","then","response","console","log","newGasPrice","data","result","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,eAAe,SAASC,WAAT,CAAqBC,aAArB,EAAoCC,KAApC,EAA2CC,QAAQ,GAAG,KAAtD,EAA6D;AAAA;;AAC1E,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,EAAxC;;AACA,QAAMQ,YAAY,GAAG,YAAY;AAC/B,QAAIL,aAAa,CAACM,cAAd,CAA6B,UAA7B,CAAJ,EAA8C;AAC5CF,MAAAA,WAAW,CAACJ,aAAa,CAACG,QAAf,CAAX;AACD,KAFD,MAEO;AACLR,MAAAA,KAAK,CACFY,GADH,CACO,4EAA4ET,aADnF,EAEGU,IAFH,CAEQC,QAAQ,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAA9B;AACA,cAAMG,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAcC,MAAd,CAAqBb,KAAK,IAAI,cAA9B,IAAgD,UAApE;;AACA,YAAIW,WAAW,KAAKT,QAApB,EAA8B;AAC5BC,UAAAA,WAAW,CAACQ,WAAD,CAAX;AACD;AACF,OARH,EASGG,KATH,CASSC,KAAK,IAAIN,OAAO,CAACC,GAAR,CAAYK,KAAZ,CATlB;AAUD;AACF,GAfD;;AAiBApB,EAAAA,SAAS,CAACS,YAAD,EAAe,KAAf,CAAT;AACA,SAAOF,QAAP;AACD;;GArBuBJ,W;UAmBtBH,S","sourcesContent":["import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\nimport { ETHERSCAN_KEY } from \"../constants\";\n\nexport default function useGasPrice(targetNetwork, speed, pollTime = 39999) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      axios\n        .get(\"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=\" + ETHERSCAN_KEY)\n        .then(response => {\n          console.log(\"response gas: \", response);\n          const newGasPrice = response.data.result[speed || \"FastGasPrice\"] * 1000000000;\n          if (newGasPrice !== gasPrice) {\n            setGasPrice(newGasPrice);\n          }\n        })\n        .catch(error => console.log(error));\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n"]},"metadata":{},"sourceType":"module"}